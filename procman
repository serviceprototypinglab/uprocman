#!/usr/bin/env python3

import sys
import os
import subprocess
import pickle
import time
import signal

class ProcMan:
	def __init__(self):
		self.processes = {}
		self.starttimes = {}

		self.parents = {}
		self.procnames = {}

		#self.load()

		self.loadtenants()
		self.tenant = None

		self.tracing = False
		self.tracer = "./tracer/procman-tracetest.sh"

		self.allpids = []

	def loadtenants(self):
		try:
			f = open(".procman.tenants", "rb")
		except:
			self.tenants = []
		else:
			self.tenants = pickle.load(f)

	def savetenants(self):
		try:
			f = open(".procman.tenants", "wb")
		except:
			pass
		else:
			pickle.dump(self.tenants, f)

	def load(self, tenant=None):
		self.tenant = tenant
		try:
			f = open(self.persistencefile(tenant), "rb")
		except:
			pass
		else:
			[self.processes, self.starttimes] = pickle.load(f)

		self.scanproc()

	def save(self):
		try:
			f = open(self.persistencefile(self.tenant), "wb")
		except:
			pass
		else:
			pickle.dump([self.processes, self.starttimes], f)

	def persistencefile(self, tenant):
		return ".procman{0}.db".format(("", ".{0}".format(tenant))[tenant is not None])

	def logfile(self, tenant):
		return ".procman{0}.log".format(("", ".{0}".format(tenant))[tenant is not None])

	def lockdir(self, tenant):
		return ".procman{0}.lock".format(("", ".{0}".format(tenant))[tenant is not None])

	def scanproc(self):
		procdir = "/proc"
		for subdir in os.listdir(procdir):
			if subdir in ("self", "thread-self"):
				continue
			statusfile = os.path.join(procdir, subdir, "status")
			if os.path.isfile(statusfile):
				f = open(statusfile)
				procname = None
				while True:
					line = f.readline().strip()
					if line.startswith("Name:"):
						procname = line.split("\t")[1]
					if line.startswith("PPid:"):
						ppid = line.split("\t")[1]
						self.parents[int(subdir)] = int(ppid)
						self.procnames[int(subdir)] = procname
						break

	def start(self, argv):
		if self.tracing:
			os.putenv("PROCMANLOG", ".procman.pid")
			argv = [self.tracer] + argv

		if not self.tenant in self.tenants:
			self.tenants.append(self.tenant)
			self.savetenants()

		x = subprocess.Popen(argv)
		self.printline("launched {0} => {1}".format(str(argv), x.pid), True)
		self.processes[x.pid] = argv
		self.starttimes[x.pid] = self.starttime(x.pid)
		self.save()

	def starttime(self, pid):
		try:
			starttime = int(open("/proc/{0}/stat".format(pid)).read().split(" ")[21])
		except:
			starttime = 0
		return starttime

	def recursekill(self, pid):
		killlist = []
		for cpid in self.parents:
			if self.parents[cpid] == pid:
				killlist.append(cpid)
				killlist += self.recursekill(cpid)
		return killlist

	def stop(self, argv):
		for pid, pargv in self.processes.items():
			targv = [self.tracer] + argv
			if pargv == argv or pargv == targv:
				killlist = [pid]
				killlist += self.recursekill(pid)
				killlist += [cpid for cpid in self.findzombies(pid) if not cpid in killlist]
				self.printline("kill {0}".format(str(killlist)), False)
				for kpid in killlist:
					try:
						os.kill(kpid, signal.SIGTERM)
					except:
						pass
				time.sleep(1)
				for kpid in killlist:
					try:
						os.kill(kpid, signal.SIGKILL)
					except:
						pass
				return
		self.printline("Unknown command, not found.", False)

	def status(self):
		deadlist = []
		for pid in self.processes:
			pgid = self.statuspid(pid)
			if pgid != -1:
				self.printstatus(pid, pgid)
				self.recursepid(pid)
			else:
				deadlist.append(pid)
		for pid in deadlist:
			self.printstatus(pid, -1)
			self.accounting(pid)
			del self.processes[pid]
			del self.starttimes[pid]
			pidfile = ".procman.pid.{0}".format(pid)
			if os.path.isfile(pidfile):
				os.unlink(pidfile)
		self.save()

	def accounting(self, pid):
		f = open(self.logfile(self.tenant), "a")
		start = self.starttimes[pid]
		stop = int(float(open("/proc/uptime").read().split(" ")[0]) * 100)
		diff = (stop - start) / 100
		print("start={0} stop={1} duration={2} command={3}".format(start, stop, diff, self.processes[pid]), file=f)

	def findzombies(self, pid):
		zombies = []
		pidfile = ".procman.pid.{0}".format(pid)
		if os.path.isfile(pidfile):
			lines = open(pidfile).readlines()
			for line in lines:
				line = line.strip()
				op = line[0]
				zpid = int(line[1:])
				if zpid in ("exited", "killed"):
					return []
				elif op == "+":
					zombies.append(zpid)
				elif op == "-":
					if zpid in zombies:
						zombies.remove(zpid)
		return zombies

	def recursepid(self, pid, indent=0, zombie=False):
			if indent == 0:
				self.allpids = [pid]
			else:
				self.allpids.append(pid)
			for cpid in self.parents:
				if self.parents[cpid] == pid:
					pgid = self.statuspid(cpid)
					self.printstatus(cpid, pgid, indent + 1)
					self.recursepid(cpid, indent + 1)
			zombies = self.findzombies(pid)
			for cpid in zombies:
				if cpid in self.allpids:
					continue
				pgid = self.statuspid(cpid)
				self.printstatus(cpid, pgid, indent + 1, True)
				self.recursepid(cpid, indent + 1, True)

	def statuspid(self, pid):
			#alive = os.path.isdir("/proc/{0}".format(pid))
			try:
				pgid = os.getpgid(pid)
			except:
				pgid = -1
			else:
				if pid in self.processes:
					starttime = self.starttime(pid)
					if starttime != self.starttimes[pid]:
						self.printline("(pid cycling for {0})".format(pid), False)
						pgid = -1
			return pgid

	def printstatus(self, pid, pgid, indent=0, zombie=False):
			alive = (pgid != -1)
			if pid in self.starttimes:
				starttime = self.starttimes[pid]
			else:
				starttime = "<unknown>"
			status = "pgid={0} alive={1} start={2}".format(pgid, alive, starttime)
			wrapper = False
			if pid in self.processes:
				procname = self.processes[pid]
				wrapper = self.tracer in procname[0]
				if wrapper and not self.tracing:
					wrapper = False
					procname = procname[1:]
			else:
				if pid in self.procnames:
					procname = "({0})".format(self.procnames[pid])
					wrapper = "procman-tracete" in procname or "strace" in procname
				else:
					procname = "<unknown>"
			printline = "{3}check {0} => {1}: {2}".format(pid, procname, status, " " * indent)
			self.printline(printline, alive, wrapper, zombie)

	def printline(self, printline, active, wrapper=False, zombie=False):
			if wrapper and not self.tracing:
				return
			if active:
				col = "\x1b[32m"
			else:
				col = "\x1b[36m"
			colreset = "\x1b[0m"
			if wrapper:
				printline = printline + "\x1b[1;33m" + " ***" + colreset
			if zombie and self.tracing:
				printline = printline + "\x1b[1;33m" + " Z" + colreset
			print("{0}{1}{2}".format(col, printline, colreset))

	def parseargs(self, tenant):
		self.load(tenant)

		if len(sys.argv) >= 2:
			if sys.argv[1] == "start":
				if len(sys.argv) >= 3:
					self.start(sys.argv[2:])
				else:
					return 1
			elif sys.argv[1] == "stop":
				if len(sys.argv) >= 3:
					self.stop(sys.argv[2:])
				else:
					return 1
			elif sys.argv[1] == "status":
				if not self.tenant and len(self.tenants) > 1:
					for tenant in self.tenants:
						self.load(tenant)
						print("# TENANT: {0}".format(tenant))
						self.status()
				else:
					self.status()
			else:
				return 1
		else:
			print("procman [-t tenant] [-T] start|stop <app/unit> / status / supervise")
			return 1

	def supervise(self):
		#import pyinotify
		#class Handler(pyinotify.ProcessEvent):
		#	def process_IN_DELETE(self, event):
		#		print("// removing", event.pathname)
		#handler = Handler()
		#wm = pyinotify.WatchManager()
		#notifier = pyinotify.Notifier(wm, handler)
		#wm.add_watch("/proc/5485", pyinotify.ALL_EVENTS, rec=True)
		#notifier.loop()

		while True:
			time.sleep(30)
			self.load(self.tenant)
			for pid in self.processes:
				pgid = self.statuspid(pid)
				if pgid == -1:
					self.printline("dead process detected: {0}".format(pid), False)
					os.system(sys.argv[0] + " status")

	def lockparseargs(self):
		tenant = None
		if "-t" in sys.argv:
			pos = sys.argv.index("-t")
			tenant = sys.argv[pos + 1]
			del sys.argv[pos]
			del sys.argv[pos]

		if "-T" in sys.argv:
			pos = sys.argv.index("-T")
			self.tracing = True
			del sys.argv[pos]

		if len(sys.argv) >= 2 and sys.argv[1] == "supervise":
			self.load(tenant)
			self.supervise()
			return

		while True:
			try:
				os.mkdir(self.lockdir(tenant))
			except FileExistsError:
				time.sleep(1)
			else:
				# Note: showing full trace while still under development
				# (e.g. useful to show .lock still exists after crash)
				#try:
				self.parseargs(tenant)
				#except Exception as e:
				#	print(e)
				os.rmdir(self.lockdir(tenant))
				break

pm = ProcMan()
sys.exit(pm.lockparseargs())
